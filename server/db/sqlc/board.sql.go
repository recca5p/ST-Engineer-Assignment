// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: board.sql

package db

import (
	"context"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (name)
VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateBoard(ctx context.Context, name string) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, name)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :one
DELETE FROM boards
WHERE id = $1
    RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteBoard(ctx context.Context, id int32) (Board, error) {
	row := q.db.QueryRowContext(ctx, deleteBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBoard = `-- name: GetBoard :one
SELECT id, name, created_at, updated_at
FROM boards
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBoard(ctx context.Context, id int32) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBoards = `-- name: ListBoards :many
SELECT id, name, created_at, updated_at
FROM boards
ORDER BY id LIMIT $1
OFFSET $2
`

type ListBoardsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBoards(ctx context.Context, arg ListBoardsParams) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, listBoards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Board{}
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards
SET name = $1, updated_at = NOW()
WHERE id = $2
    RETURNING id, name, created_at, updated_at
`

type UpdateBoardParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, updateBoard, arg.Name, arg.ID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
