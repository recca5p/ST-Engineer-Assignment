// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: column.sql

package db

import (
	"context"
	"database/sql"
)

const createColumn = `-- name: CreateColumn :one
INSERT INTO columns (name, board_id, position)
VALUES ($1, $2, $3) RETURNING id, name, board_id, position, created_at, updated_at
`

type CreateColumnParams struct {
	Name     string        `json:"name"`
	BoardID  sql.NullInt32 `json:"board_id"`
	Position int32         `json:"position"`
}

func (q *Queries) CreateColumn(ctx context.Context, arg CreateColumnParams) (Column, error) {
	row := q.db.QueryRowContext(ctx, createColumn, arg.Name, arg.BoardID, arg.Position)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteColumn = `-- name: DeleteColumn :one
DELETE FROM columns
WHERE id = $1
    RETURNING id, name, board_id, position, created_at, updated_at
`

func (q *Queries) DeleteColumn(ctx context.Context, id int32) (Column, error) {
	row := q.db.QueryRowContext(ctx, deleteColumn, id)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getColumn = `-- name: GetColumn :one
SELECT id, name, board_id, position, created_at, updated_at
FROM columns
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetColumn(ctx context.Context, id int32) (Column, error) {
	row := q.db.QueryRowContext(ctx, getColumn, id)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getColumnByPosition = `-- name: GetColumnByPosition :one
SELECT id, name, board_id, position, created_at, updated_at
FROM columns
WHERE position = $1 LIMIT 1
`

func (q *Queries) GetColumnByPosition(ctx context.Context, position int32) (Column, error) {
	row := q.db.QueryRowContext(ctx, getColumnByPosition, position)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listColumns = `-- name: ListColumns :many
SELECT id, name, board_id, position, created_at, updated_at
FROM columns
WHERE board_id = $1
ORDER BY position LIMIT $2
OFFSET $3
`

type ListColumnsParams struct {
	BoardID sql.NullInt32 `json:"board_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListColumns(ctx context.Context, arg ListColumnsParams) ([]Column, error) {
	rows, err := q.db.QueryContext(ctx, listColumns, arg.BoardID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Column{}
	for rows.Next() {
		var i Column
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BoardID,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColumn = `-- name: UpdateColumn :one
UPDATE columns
SET name = $1, position = $2, updated_at = NOW()
WHERE id = $3
    RETURNING id, name, board_id, position, created_at, updated_at
`

type UpdateColumnParams struct {
	Name     string `json:"name"`
	Position int32  `json:"position"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateColumn(ctx context.Context, arg UpdateColumnParams) (Column, error) {
	row := q.db.QueryRowContext(ctx, updateColumn, arg.Name, arg.Position, arg.ID)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
