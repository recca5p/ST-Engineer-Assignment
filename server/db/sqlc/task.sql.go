// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, column_id, position, due_date)
VALUES ($1, $2, $3, $4, $5) RETURNING id, title, description, column_id, position, due_date, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	ColumnID    sql.NullInt32  `json:"column_id"`
	Position    int32          `json:"position"`
	DueDate     sql.NullTime   `json:"due_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.ColumnID,
		arg.Position,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ColumnID,
		&i.Position,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks
WHERE id = $1
    RETURNING id, title, description, column_id, position, due_date, created_at, updated_at
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ColumnID,
		&i.Position,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, column_id, position, due_date, created_at, updated_at
FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ColumnID,
		&i.Position,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, column_id, position, due_date, created_at, updated_at
FROM tasks
WHERE column_id = $1
ORDER BY position LIMIT $2
OFFSET $3
`

type ListTasksParams struct {
	ColumnID sql.NullInt32 `json:"column_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.ColumnID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ColumnID,
			&i.Position,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = $1, description = $2, position = $3, due_date = $4, updated_at = NOW()
WHERE id = $5
    RETURNING id, title, description, column_id, position, due_date, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Position    int32          `json:"position"`
	DueDate     sql.NullTime   `json:"due_date"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.DueDate,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ColumnID,
		&i.Position,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
